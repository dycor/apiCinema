swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "API Cinema"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:

  /films/{id}:
    get:
      tags:
      - "film"
      summary: "Return a film"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of film to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Film"
  /films/search:
    get:
      tags:
      - "film"
      summary: "Return a list of films"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "filter research"
        description: "filter request"
        schema:
          $ref: "#/definitions/FilmFilter"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Film"




  /showings/search/{param}:
    get:
      tags:
      - "showings"
      summary: "Return informations about a showing"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "param"
        in: "path"
        description: "ID of film to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Film"


definitions:

  Film:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        format: "string"
      releaseDate:
        $ref: "#/definitions/Date"
      synopsis:
        type: "string"
        format: "string"
      director:
        type: "integer"
        format: "int64"
      created_at:
        $ref: "#/definitions/Date"
      updated_at:
        $ref: "#/definitions/Date"
      director_data:
        type: "object"
        format: "array"
  Date:
    properties:
      date:
        type: "string"
        format: "date-time"
      timezone_type:
        type: "integer"
        format: "int"
      timezone:
        type: "string"
        format: "string"

  FilmFilter:
    properties:
      title:
        type: "string"
        format: "string"
      releaseDate:
        type: "string"
        format: "date"
      category:
        type: "string"
        format: "string"
      actorFirstname:
        type: "string"
        format: "string"
      actorLastname:
        type: "string"
        format: "string"
      directorLastname:
        type: "string"
        format: "string"
      directorFirstname:
        type: "string"
        format: "string"

  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
